package es.app.attune.attune.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAYLIST".
*/
public class PlaylistDao extends AbstractDao<Playlist, Long> {

    public static final String TABLENAME = "PLAYLIST";

    /**
     * Properties of entity Playlist.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Tempo = new Property(2, float.class, "tempo", false, "TEMPO");
        public final static Property Duration = new Property(3, float.class, "duration", false, "DURATION");
        public final static Property Image = new Property(4, String.class, "image", false, "IMAGE");
        public final static Property Creation_date = new Property(5, java.util.Date.class, "creation_date", false, "CREATION_DATE");
    }

    private DaoSession daoSession;


    public PlaylistDao(DaoConfig config) {
        super(config);
    }
    
    public PlaylistDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAYLIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"TEMPO\" REAL NOT NULL ," + // 2: tempo
                "\"DURATION\" REAL NOT NULL ," + // 3: duration
                "\"IMAGE\" TEXT," + // 4: image
                "\"CREATION_DATE\" INTEGER NOT NULL );"); // 5: creation_date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAYLIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Playlist entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getName());
        stmt.bindDouble(3, entity.getTempo());
        stmt.bindDouble(4, entity.getDuration());
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(5, image);
        }
        stmt.bindLong(6, entity.getCreation_date().getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Playlist entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getName());
        stmt.bindDouble(3, entity.getTempo());
        stmt.bindDouble(4, entity.getDuration());
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(5, image);
        }
        stmt.bindLong(6, entity.getCreation_date().getTime());
    }

    @Override
    protected final void attachEntity(Playlist entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Playlist readEntity(Cursor cursor, int offset) {
        Playlist entity = new Playlist( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getFloat(offset + 2), // tempo
            cursor.getFloat(offset + 3), // duration
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // image
            new java.util.Date(cursor.getLong(offset + 5)) // creation_date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Playlist entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setTempo(cursor.getFloat(offset + 2));
        entity.setDuration(cursor.getFloat(offset + 3));
        entity.setImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreation_date(new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Playlist entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Playlist entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Playlist entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
