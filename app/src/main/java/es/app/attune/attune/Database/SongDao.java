package es.app.attune.attune.Database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SONG".
*/
public class SongDao extends AbstractDao<Song, String> {

    public static final String TABLENAME = "SONG";

    /**
     * Properties of entity Song.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property IdPlaylist = new Property(1, String.class, "idPlaylist", false, "ID_PLAYLIST");
        public final static Property IdSpotify = new Property(2, String.class, "idSpotify", false, "ID_SPOTIFY");
        public final static Property GenreId = new Property(3, String.class, "genreId", false, "GENRE_ID");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Duration = new Property(5, int.class, "duration", false, "DURATION");
    }

    private DaoSession daoSession;

    private Query<Song> attPlaylist_SongsQuery;

    public SongDao(DaoConfig config) {
        super(config);
    }
    
    public SongDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SONG\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"ID_PLAYLIST\" TEXT NOT NULL ," + // 1: idPlaylist
                "\"ID_SPOTIFY\" TEXT NOT NULL ," + // 2: idSpotify
                "\"GENRE_ID\" TEXT NOT NULL ," + // 3: genreId
                "\"NAME\" TEXT NOT NULL ," + // 4: name
                "\"DURATION\" INTEGER NOT NULL );"); // 5: duration
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_SONG_ID ON \"SONG\"" +
                " (\"ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SONG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Song entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getIdPlaylist());
        stmt.bindString(3, entity.getIdSpotify());
        stmt.bindString(4, entity.getGenreId());
        stmt.bindString(5, entity.getName());
        stmt.bindLong(6, entity.getDuration());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Song entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getIdPlaylist());
        stmt.bindString(3, entity.getIdSpotify());
        stmt.bindString(4, entity.getGenreId());
        stmt.bindString(5, entity.getName());
        stmt.bindLong(6, entity.getDuration());
    }

    @Override
    protected final void attachEntity(Song entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public Song readEntity(Cursor cursor, int offset) {
        Song entity = new Song( //
            cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // idPlaylist
            cursor.getString(offset + 2), // idSpotify
            cursor.getString(offset + 3), // genreId
            cursor.getString(offset + 4), // name
            cursor.getInt(offset + 5) // duration
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Song entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setIdPlaylist(cursor.getString(offset + 1));
        entity.setIdSpotify(cursor.getString(offset + 2));
        entity.setGenreId(cursor.getString(offset + 3));
        entity.setName(cursor.getString(offset + 4));
        entity.setDuration(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Song entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Song entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Song entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "songs" to-many relationship of AttPlaylist. */
    public List<Song> _queryAttPlaylist_Songs(String id) {
        synchronized (this) {
            if (attPlaylist_SongsQuery == null) {
                QueryBuilder<Song> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                queryBuilder.orderRaw("T.'NAME' ASC");
                attPlaylist_SongsQuery = queryBuilder.build();
            }
        }
        Query<Song> query = attPlaylist_SongsQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAttPlaylistDao().getAllColumns());
            builder.append(" FROM SONG T");
            builder.append(" LEFT JOIN ATT_PLAYLIST T0 ON T.\"ID_PLAYLIST\"=T0.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Song loadCurrentDeep(Cursor cursor, boolean lock) {
        Song entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        AttPlaylist playlist = loadCurrentOther(daoSession.getAttPlaylistDao(), cursor, offset);
         if(playlist != null) {
            entity.setPlaylist(playlist);
        }

        return entity;    
    }

    public Song loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Song> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Song> list = new ArrayList<Song>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Song> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Song> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
